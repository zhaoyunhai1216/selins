# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see org.apache.kafka.clients.consumer.ConsumerConfig for more details

# list of brokers used for bootstrapping knowledge about the rest of the cluster
# format: host1:port1,host2:port2 ...
bootstrap.servers=62.234.114.155:9092

# What to do when there is no initial offset in Kafka or if the current
# offset does not exist any more on the server: latest, earliest, none
# auto.offset.reset=

# If true the consumer's offset will be periodically committed in the background.
enable.auto.commit = true

# The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if <code>enable.auto.commit</code> is set to <code>true</code>.
auto.commit.interval.ms = 1000

# The timeout used to detect consumer failures when using " +
# Kafka's group management facility. The consumer sends periodic heartbeats to indicate its liveness
# to the broker. If no heartbeats are received by the broker before the expiration of this session timeout,
# then the broker will remove this consumer from the group and initiate a rebalance. Note that the value
# must be in the allowable range as configured in the broker configuration by <code>group.min.session.timeout.ms</code>
# and <code>group.max.session.timeout.ms</code>.
session.timeout.ms = 30000

# The maximum amount of data per-partition the server will return. If the first
# message in the first non-empty partition of the fetch is larger than this
# limit, the message will still be returned to ensure that the consumer can make progress
max.partition.fetch.bytes = 10485760

# Deserializer class for key that implements the Deserializer interface.
key.deserializer = org.apache.kafka.common.serialization.ByteArrayDeserializer

# Deserializer class for value that implements the Deserializer interface.
value.deserializer = org.apache.kafka.common.serialization.ByteArrayDeserializer
